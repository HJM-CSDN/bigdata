1.什么是NoSql
    为了解决高并发,高可扩展,高可用,大数据存储问题而产生的数据库解决方案,就是NoSql数据库
    NoSql,泛指非关系型的数据库,NoSQL即Not-Only-SQL,它可以作为关系型数据库的良好补充,但是它
不能替代关系型数据库,而且它是存储在内存中,所以它的访问速度很快.

2.NoSQL的数据库分类
    	键值(Key-Value)存储数据库
    相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB
    典型应用： 内容缓存，主要用于处理大量数据的高访问负载。
    数据模型： 一系列键值对
    优势： 快速查询
    劣势： 存储的数据缺少结构化

    	列存储数据库
    相关产品：Cassandra, HBase, Riak
    典型应用：分布式的文件系统
    数据模型：以列簇式存储，将同一列数据存在文件系统中
    优势：查找速度快，可扩展性强，更容易进行分布式扩展
    劣势：功能相对局限

    	文档型数据库
    相关产品：CouchDB、MongoDB
    典型应用：Web应用（与Key-Value类似，Value是结构化的）
    数据模型： 一系列键值对
    优势：数据结构要求不严格
    劣势： 查询性能不高，而且缺乏统一的查询语法

    	图形(Graph)数据库
    相关数据库：Neo4J、InfoGrid、Infinite Graph
    典型应用：社交网络
    数据模型：图结构
    优势：利用图结构相关算法。
    劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。

MongoDB是文档型数据库，使用bson结构，可以更加灵活的处理嵌套结构的数据。是这三个里最接近关系型数据库的。
Redis是k-v型数据库，目标是做高效的分布式缓存。数据一般不实时落地。也不适合做存储和分析。
HBase是列式数据库，BigTable的一种实现，目标是高效存储大量数据，支持列压缩，行事务。适合Schema-less的数据。



3.	Redis介绍
    Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库。
它通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：
    字符串类型    散列类型   列表类型    集合类型  有序集合类型
    String        hash      list        set         sorted set
4 Redis应用场景
  缓存（数据查询、短连接、新闻内容、商品内容等等）。（最多使用）
  分布式集群架构中的session分离。
  聊天室的在线好友列表。
  任务队列。（秒杀、抢购、12306等等）
  应用排行榜。
  网站访问统计。
  数据过期处理（可以精确到毫秒）

5	redis的特性
1、redis数据访问速度快（数据在内存中）
2、redis有数据持久化机制
    RDB持久化是指用数据集快照的方式记录redis数据库的所有键值对。
（持久化机制有两种：
    1 定期将内存数据dump到磁盘；
    2 aof(append only file)持久化机制——用记日志的方式记录每一条数据更新操作，
       一旦出现灾难事件，可以通过日志重放来恢复整个数据库）

3、redis支持集群模式（容量可以线性扩展），从3.0.0版本开始支持集群模式。
4、redis相比其他缓存工具（ehcach/memcached），有一个鲜明的优势：支持丰富的数据结构

6 Redis数据类型!!!!
      String类型
      Hash类型
      List类型
      Set类型
      SortedSet类型

7  List是有序可重复的集合
8  ArrayList与LinkedList的区别
	ArrayList使用数组方式存储数据，所以根据索引查询数据速度快，而新增或者删除元素时需要设计到位移操作，所以比较慢。
	LinkedList使用双向链接方式存储数据，每个元素都记录前后元素的指针，所以插入、删除数据时
	只是更改前后元素的指针指向即可，速度非常快，然后通过下标查询元素时需要从头开始索引，所以比较慢，
	但是如果查询前几个元素或后几个元素速度比较快。
    总结
    arrayList在进行增删改时很麻烦
    linkedList则无该问题，redis的list类型存储时采用linkedlist

    redis存储list类型可以实现队列和堆栈，队列是先进先出，而堆栈是先进后出。

9 redis持久化!!!!!
    Redis有两种持久化的方式：快照（RDB文件）和追加式文件（AOF文件）：
    RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照。
    AOF持久化方式则会记录每一个服务器收到的写操作。在服务启动时，这些记录的操作会逐条执行从而重建出原来的数据。写操作命令记录的格式跟Redis协议一致，以追加的方式进行保存。
    Redis的持久化是可以禁用的，就是说你可以让数据的生命周期只存在于服务器的运行时间里。
    两种方式的持久化是可以同时存在的，但是当Redis重启时，AOF文件会被优先用于重建数据。


    rdb方式
       RDB方式持久化是通过快照(snapshshotting)完成的,当符合一定条件时,Redis会自动将内存中的数据进行快照并持久化到硬盘.
       RDB是Redis默认采用的持久化方式.
       通过RDB方式实现持久化，一旦Redis异常退出，就会丢失最后一次快照以后更改的所有数据。
       这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。
       如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化。

    aof方式
         aof是默认不开启的，需要手动设置。
        如果rdb方式和aof方式同时使用的话，那么默认从aof文件中加载数据。

优点
RDB文件是一个很简洁的单文件，它保存了某个时间点的Redis数据，很适合用于做备份。你可以设定一个时间点对RDB文件进行归档，这样就能在需要的时候很轻易的把数据恢复到不同的版本。
基于上面所描述的特性，RDB很适合用于灾备。单文件很方便就能传输到远程的服务器上。
RDB的性能很好，需要进行持久化时，主进程会fork一个子进程出来，然后把持久化的工作交给子进程，自己不会有相关的I/O操作。
比起AOF，在数据量比较大的情况下，RDB的启动速度更快。
缺点
RDB容易造成数据的丢失。假设每5分钟保存一次快照，如果Redis因为某些原因不能正常工作，那么从上次产生快照到Redis出现问题这段时间的数据就会丢失了。
RDB使用fork()产生子进程进行数据的持久化，如果数据比较大的话可能就会花费点时间，造成Redis停止服务几毫秒。如果数据量很大且CPU性能不是很好的时候，停止服务的时间甚至会到1秒。

10 redis主从复制
 为了高可用，引入redis的主从复制的概念。

11 redis集群!!!
   redis-cluster架构:
    1、	集群通信是通过“ping-pong”机制进行通信；
    2、	客户端不需要将所有的节点都连接上，只需要连接其中一个节点即可。
    3、	集群中存储数据是存储到一个个的槽中，集群中槽的个数是固定的：16384，槽的编号是【0-16383】。
        在集群中存储数据时，会根据key进行计算，计算出一个结果，然后将这个结果和16384取余，
        余数就是这个key将要存储的槽的编号。
    注意：槽的编号之间不能断开。

    槽的计算会将数据保存的很平均，不会产生一个槽满一个槽空的情况。

    redis-cluster投票:容错

    什么时候整个集群不可用(cluster_state:fail)?
        a:如果集群任意master挂掉,且当前master没有slave.集群进入fail状态,
           也可以理解成集群的slot映射[0-16383]不完整时进入fail状态。
        b:如果集群超过半数以上master挂掉，无论是否有slave集群,进入fail状态。

12  Jedis连接集群
    public static void main(String[] args) {
        //节点设置
        HashSet<HostAndPort> nodes = new HashSet<>();
        nodes.add(new HostAndPort("node01", 7001));
        nodes.add(new HostAndPort("node02", 7002));
        nodes.add(new HostAndPort("node03", 7003));
        nodes.add(new HostAndPort("node04", 7004));
        nodes.add(new HostAndPort("node05", 7005));
        nodes.add(new HostAndPort("node06", 7006));
        //创建JedisCluster实例
        JedisCluster cluster = new JedisCluster(nodes);
        cluster.set("ruhua", "rightgirl");
        String s = cluster.get("ruhua");
        System.out.println(s);

        cluster.close();
    }


redis的雪崩和击穿!!!
https://blog.csdn.net/lala12d/article/details/82777742

redis存的类型

redis的原子性、事务性：


1.安装redis
https://www.bilibili.com/video/av49517046?p=2
https://www.runoob.com/redis/redis-conf.html

    1.安装gcc环境
    [deployer@t06 ~]$ sudo yum -y install gcc automake autoconf libtool make
     tar -zxvf redis-5.0.4.tar.gz
     cd redis-5.0.4
     make PREFIX=/usr/local/redis install

     [deployer@t06 bin]$ pwd
     /usr/local/redis/bin

密码设置为unicom

守护线程启动方式：
[deployer@t06 redis]$ ./bin/redis-server ./redis.conf
26191:C 30 Aug 2019 11:37:34.147 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
26191:C 30 Aug 2019 11:37:34.147 # Redis version=5.0.4, bits=64, commit=00000000, modified=0, pid=26191, just started
26191:C 30 Aug 2019 11:37:34.147 # Configuration loaded
[deployer@t06 redis]$

[deployer@t06 redis]$ ps -ef | grep redis
deployer 26192     1  0 11:37 ?        00:00:00 ./bin/redis-server *:6379
deployer 26537 19287  0 11:38 pts/11   00:00:00 grep --color=auto redis
[deployer@t06 redis]$

持久化：
持久化时间在redis.conf里可以更改持久化方式
因此，如果数据还没来得及持久化，然后宕机，会丢失数据
默认持久化时间为15分钟(900s)，可以到配置文件中修改。
通过语句 shutdown 正常关闭也会做持久化机制。
通过kill -9 杀死进程会导致数据丢失

