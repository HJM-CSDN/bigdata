一.为什么线程不安全

个人觉得 HashMap 在并发时可能出现的问题主要是两方面,首先如果多个线程同时使用put方法添加元素，而且假设正好
存在两个 put 的 key 发生了碰撞(根据 hash 值计算的bucket 一样)，那么根据 HashMap 的实现，这两个 key
会添加到数组的同一个位置，这样最终就会发生其中一个线程的put 的数据被覆盖。第二就是如果多个线程同时检测到元素个
数超过数组大小* loadFactor ，这样就会发生多个线程同时对Node 数组进行扩容，都在重新计算元素位置以及复制数据，
但是最终只有一个线程扩容后的数组会赋给 table，也就是说其他线程的都会丢失，并且各自线程 put 的数据也丢失。

HashMap 在并发执行 put 操作时会引起死循环，导致 CPU 利用率接近100%。
因为多线程会导致 HashMap 的 Node 链表形成环形数据结构，一旦形成环形
数据结构，Node 的 next 节点永远不为空，就会在获取 Node 时产生死循环。

二.三种方式解决线程安全问题
       Hashtable
       ConcurrentHashMap
       Synchronized Map

CHM 性能是明显优于 Hashtable 和 SynchronizedMap 的,CHM 花费的时间比前两个的一半还少。

1 HashTable源码中是使用synchronized来保证线程安全的，比如下面的get方法和put方法：

    public synchronized V get(Object key) {// 省略实现 }
    public synchronized V put(K key, V value) {// 省略实现}

所以当一个线程访问HashTable的同步方法时，其他线程如果也要访问同步方法，会被阻塞住。
举个例子，当一个线程使用put方法时，另一个线程不但不可以使用put方法，连get方法都不可以，
好霸道啊！！！so~~，效率很低，现在基本不会选择它了。

2 从源码中可以看出调用synchronizedMap()方法后会返回一个SynchronizedMap类的对象，
  而在SynchronizedMap类中使用了synchronized同步关键字来保证对Map的操作是线程安全的。

3 ConcurrentHashMap
  在java8中CHM摒弃了Segment（锁段）的概念，而是启用了一种全新的方式实现,利用CAS算法，。