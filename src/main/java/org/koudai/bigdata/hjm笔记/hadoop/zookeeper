zookeeper
    zookeeper是一个分布式协调服务;
    集群角色:leader 和 follower（Observer）
    底层核心功能:
        管理用户程序提交的数据            (存储)
        为用户程序提供数据节点监听服务    (监听)
1、应用场景
    主从协调
    服务器节点动态上下线
    统一配置管理
    分布式共享锁
    统一名称服务等
    解决单点故障
 https://cloud.tencent.com/developer/article/1177322
 https://blog.csdn.net/king866/article/details/53992653
2、服务器动态上下线感知
   我们系统的每台服务器启动的时候，都到第三方去注册一下，注册服务器的相关信息，
   并且还可以在每台服务器的节点下记录每台服务器的下载进度。并且在我们服务器宕机的时候，
   我们的第三方能够感知的到。这样就需要我们的第三方能够提供监听功能给我们系统的服务器。
   所以这个第三方就是我们的Zookeeper。

3、主从协调
    假设现在我们有两台提供服务的服务器，现在我们客户端来连接服务器的时候应该去找哪一台呢？
    这个时候就涉及到服务器的主从选举的场景。
    这个时候如果有第三方，然后我们的服务程序一旦启动就去第三方去注册。
    然后第三方给每台注册的服务器一个编号，并记录其IP信息；然后我们假如指定编号最大的作为主服务器，
    然后其他服务器去监听父节点，如果父节点下面子节点的服务器挂掉了，第三方会帮我们删除掉这个子节点，
    然后通知那些监听的服务器，让他们重新选举一台编号最大的服务器作为主服务器。然后客户端来连接的时候先去找第三方，
    查看当前谁是主服务器并获取到其IP，然后去连接到主服务器。
    所以这个第三方就是我们的Zookeeper。

4、配置管理
为什么要用统一配置？
我们做项目时用到的配置比如数据库配置等...我们都是写死在项目里面，如果需要更改，那么也是的修改配置文件然后再投产上去，
那么问题来了，如果做集群的呢，有100台机器，这时候做修改那就太不切实际了；那么就需要用到统一配置管理啦。
采用方案
    1.公共配置抽取存放于zookeeper中并落地数据库
    2.对公共配置修改后发布到zookeeper中并落地数据库
    3.对应用开启配置实时监听，zookeeper配置文件一旦被修改，应用可实时监听到并获取

5、分布式共享锁
   分布式锁主要用于在分布式环境中保护跨进程、跨主机、跨网络的共享资源实现互斥访问，以达到保证数据的一致性。
   利用zookeeper允许客户端创建一个有序的目录的特性,可以实现一个可靠地分布式共享锁
   zookeeper维护的分布式目录数据结构视图，对于各个zookeeper节点都是相同。
   zookeeper允许客户端创建一个有序的目录——在CreateMode.EPHEMERAL_SEQUENTIAL创建模式下，
   zookeeper会自动在客户端创建的目录名称后面添加一个自增长的id。
   分布式进程在读写一个共享数据时，可以先在某个公共目录下创建一个有序子目录，然后判断该目录id是否最小。
   目录id最小则获得锁并消费共享数据，然后删除该目录。否则则等待，直到自己的目录id成为最小后，才获得锁。

   .阐述zookeeper分布式锁的实现原理

   在zk上创建永久节点server，所有要访问资源的客户端在永久节点server下注册临时有序节点，并且监听自己前一个节点。
   序列号最小的获得锁可以访问资源，访问结束，断开连接，注册的临时节点被删除，他的下一个节点通过监听能够知道，
   此时节点序列号变为最小，获取到了锁，可以访问资源。

6、选举机制

  1.全新集群的选举机制：
目前有5台服务器，每台服务器均没有数据，它们的编号分别是1,2,3,4,5,按编号依次启动，它们的选择举过程如下：
服务器1启动，给自己投票，然后发投票信息，由于其它机器还没有启动所以它收不到反馈信息，服务器1的状态一直属于Looking。
服务器2启动，给自己投票，同时与之前启动的服务器1交换结果，由于服务器2的编号大所以服务器2胜出，
            但此时投票数没有大于半数，所以两个服务器的状态依然是LOOKING。
服务器3启动，给自己投票，同时与之前启动的服务器1,2交换信息，由于服务器3的编号最大所以服务器3胜出，
            此时投票数正好大于半数，所以服务器3成为领导者，服务器1,2成为小弟。
服务器4启动，给自己投票，同时与之前启动的服务器1,2,3交换信息，尽管服务器4的编号大，
            但之前服务器3已经胜出，所以服务器4只能成为小弟。
服务器5启动，后面的逻辑同服务器4成为小弟。

非全新集群选举：
   对于运行正常的zookeeper集群，中途有机器down掉，需要重新选举时，选举过程就需要加入数据ID、服务器ID、和逻辑时钟。

           这样选举就变成：

               1.逻辑时钟小的选举结果被忽略，重新投票；（除去选举次数不完整的服务器）

               2.统一逻辑时钟后，数据id大的胜出；（选出数据最新的服务器）

               3.数据id相同的情况下，服务器id大的胜出。（数据相同的情况下， 选择服务器id最大，即权重最大的服务器）
   ---------------------
   原文：https://blog.csdn.net/liyungfeijob/article/details/79596324


    1、2181：对cline端提供服务

    2、3888：选举leader使用

    3、2888：集群内机器通讯使用（Leader监听此端口）
