隐式转换
隐式转换是使用implicit修饰的带有单个参数的普通函数。这种函数将自动应用，将值从一种类型转换为另一种类型。
举例说明：

我们想将整数n转换为分数n/1，
定义implicit def int2Fraction(n: Int) = Fraction(n, 1)
在进行如下表达式求值的时候：
val result = 3 * Fraction(4, 5)
编译器将调用int2Fraction(3)，将整数转换成一个Fraction对象，然后按照Fraction类的*方法定义来进行计算。

隐式转换可以为现有的类库添加功能：

我们想为java.io.File类添加一个read方法来读取文件
在Scala中，可以定义一个类型来提供read或你想要的功能：

class RichFile(val from: File) {
  def read = Source.fromFile(from.getPath).mkString
}
然后再提供一个隐式转换来将原来的File类型转换到新定义的类型：

implicit def file2RichFile(from: File) = new RichFile(from)
这样就可以在File对象上调用read方法了，它被隐式转换为一个RichFile对象。

隐式转换的规则
作用域规则
隐式转换函数的可用位置：

位于源或目标类型的伴生对象中的隐式函数
位于当前作用域可以以单个标识符指代的隐式函数
假如隐式函数放在了Conversions对象中，而这个对象位于com.xxx.yyy包，那么引入语句应该是：import com.xxx.yyy.Conversions._。

无歧义规则
隐式转换的应用场景：

当表达式的类型与预期的类型不同时：
比如sqrt(Fraction(1, 4))中，sqrt期望一个Double的参数，编译器会调用类似fraction2Double的隐式函数来将Fraction对象转换为Double对象。
当对象访问一个不存在的成员时：
比如new File("README").read中，File没有read方法，编译器会调用file2RichFile，然后调用RichFile中定义的read方法。
当对象调用某个方法，而该方法的参数声明与传入参数不匹配时：
比如3 * Fraction(4, 5)中，Int类的*方法不接收Fraction作为参数，编译器会调用int2Fraction进行隐式转换。
编译器不会使用隐式转换的情况：

如果代码能够不适用隐式转换的前提下通过编译，则不会使用隐式转换。
编译器不会尝试同时执行多个转换，所以隐式转换是单一调用的。
存在二义性的转换是错误的，编译器将会报错。
隐式参数
函数或方法可以带有一个标记为implicit的参数列表。该情况下，编译器会查找缺省值，提供给该函数或方法。
比如:

case class Delimiters(left: String, right: String)

def quote(what: String)(implicit delims: Delimiters) =
  delims.left + what + delims.right

implicit val quoteDelimiters = Delimiters("<<", ">>")
当我们调用quote("Scala Programming")时，编译器会查找一个类型为Delimiters的隐式值，输出<<Scala Programming>>。

编译器的查找位置：

当前作用域所有可用单个标识符指代的满足类型要求的val和def
与所要求类型相关联的类型的繁盛对象。相关联的类型包括所要求类型本身，以及它的类型参数。
利用隐式参数进行隐式转换
我们提供一个泛型函数来得到相对小的值：
def smaller[T](a: T, b: T) = if (a < b) a else b
这里由于我们并不知道a和b的类型是否有<操作符，所以编译器不会通过。
解决办法是添加一个隐式参数order来指代一个转换函数：

def smaller(a: T, b: T)(implicit order: T => Ordered[T])
  = if(order(a) < b) a else b
由于Ordered[T]特质中有一个接受T作为参数的<方法，所以编译器将在编译时知道T，并且从而判决是否T => Ordered[T]类型的隐式定义存在于作用域中。
这样，才可以调用smaller(40, 2)或者smaller("AA", "BB")。
注意，order是一个带有单个参数的函数，被打上了implicit标签，所以它不仅是一个隐式参数，也是一个隐式转换。那么，我们可以在函数体重省略order的显示调用。

def smaller[T](a: T, b: T)(implicit order: T => Ordered[T])
  = if (a < b) a else b
因为a没有带<的方法，那么会调用order(a)进行转换。

作者：JasonDing
链接：https://www.jianshu.com/p/9be0ee82c0c1
來源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。